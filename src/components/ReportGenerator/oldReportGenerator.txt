import React, { useState, useRef } from "react";
import {
  PieChart,
  Pie,
  Cell,
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
} from "recharts";
import html2canvas from "html2canvas";
import jsPDF from "jspdf";
import logo from "../../assets/tc-report-logo.png"; // assuming .png or converted logo
import "./ReportGenerator.scss";

const pieData = [
  { name: "Passed", value: 400 },
  { name: "Failed", value: 100 },
];

const barData = [
  { name: "Week 1", value: 200 },
  { name: "Week 2", value: 300 },
  { name: "Week 3", value: 150 },
];

const COLORS = ["#4caf50", "#f44336"];

const ReportGenerator = () => {
  const reportRef = useRef(null);

  const [notes, setNotes] = useState([]);
  const [isAddingNote, setIsAddingNote] = useState(false);
  const [noteTitle, setNoteTitle] = useState("");
  const [noteContent, setNoteContent] = useState("");

  const handleExportPDF = async () => {
    const element = reportRef.current;
    const canvas = await html2canvas(element, { scale: 2 });
    const imgData = canvas.toDataURL("image/png");

    const pdf = new jsPDF({
      orientation: "portrait",
      unit: "mm",
      format: "a4",
    });

    const pdfWidth = pdf.internal.pageSize.getWidth();
    const imgProps = pdf.getImageProperties(imgData);
    const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;

    pdf.addImage(imgData, "PNG", 0, 0, pdfWidth, pdfHeight);
    pdf.save(`Quality_Report_${new Date().toISOString().slice(0, 10)}.pdf`);
  };

  const currentDate = new Date().toLocaleDateString("en-US", {
    month: "long",
    year: "numeric",
  });

  const handleAddNote = () => {
    if (noteTitle && noteContent) {
      setNotes([...notes, { title: noteTitle, content: noteContent }]);
      setNoteTitle("");
      setNoteContent("");
      setIsAddingNote(false);
    }
  };

  const handleCancelNote = () => {
    setNoteTitle("");
    setNoteContent("");
    setIsAddingNote(false);
  };

  return (
    <div className="report-wrapper">
      <div className="report-content" ref={reportRef}>
        <div className="report-header">
          <img src={logo} alt="Company Logo" className="report-logo" />
          <div className="report-title">
            <h2>Quality Report</h2>
            <p>{currentDate}</p>
          </div>
        </div>

        <div className="report-section">
          <h3>First Notes</h3>
          {notes.length === 0 && !isAddingNote && (
            <button onClick={() => setIsAddingNote(true)}>+</button>
          )}

          {isAddingNote && (
            <div className="note-input">
              <input
                type="text"
                placeholder="Enter note title"
                value={noteTitle}
                onChange={(e) => setNoteTitle(e.target.value)}
              />
              <textarea
                placeholder="Enter note content"
                value={noteContent}
                onChange={(e) => setNoteContent(e.target.value)}
              />
              <div>
                <button onClick={handleAddNote}>Submit</button>
                <button onClick={handleCancelNote}>Cancel</button>
              </div>
            </div>
          )}

          {notes.map((note, index) => (
            <div key={index} className="note-item">
              <h4>{note.title}</h4>
              <p>{note.content}</p>
            </div>
          ))}
        </div>

        <div className="report-section">
          <h3>Quality Summary</h3>
          <ResponsiveContainer width="100%" height={250}>
            <PieChart>
              <Pie
                data={pieData}
                dataKey="value"
                nameKey="name"
                outerRadius={80}
                label
              >
                {pieData.map((entry, index) => (
                  <Cell
                    key={`cell-${index}`}
                    fill={COLORS[index % COLORS.length]}
                  />
                ))}
              </Pie>
              <Tooltip />
            </PieChart>
          </ResponsiveContainer>
        </div>

        <div className="report-section">
          <h3>Weekly Quality Overview</h3>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={barData}>
              <XAxis dataKey="name" />
              <YAxis />
              <Tooltip />
              <Bar dataKey="value" fill="#2196f3" />
            </BarChart>
          </ResponsiveContainer>
        </div>

        <div className="report-section">
          <h3>Additional Notes</h3>
          {notes.length === 0 ? (
            <p>No additional notes added yet.</p>
          ) : (
            notes.map((note, index) => (
              <div key={index}>
                <h4>{note.title}</h4>
                <p>{note.content}</p>
              </div>
            ))
          )}
        </div>
      </div>

      <div className="report-download-button">
        <button onClick={handleExportPDF}>Download Report as PDF</button>
      </div>
    </div>
  );
};

export default ReportGenerator;
